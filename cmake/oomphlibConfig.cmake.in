# ===============================================================================
# A template configuration file to be processed by configure_file(...). We rely
# on this file to make the oomph-lib library available to other CMake projects
# after it has been installed. It contains information about oomph-lib's
# dependencies and the project configuration.
#
# CMake will replace variables enclosed by "@" by their values during the
# configuration step and the populated config file will be placed in the build
# folder under the same filename but without the .in suffix. After the CMake
# installation step, the newly-generated config file will, by default, be
# installed to the user's lib/cmake/ directory (e.g. /usr/lib/cmake/). If the
# user specified a custom installation path, it will be placed there instead,
# but again under the lib/cmake/ subdirectory.
#
# Once the library has been installed, the configuration file can found using
# find_package(oomphlib). If a custom installation path was used, the user will
# need to append that path to the CMAKE_PREFIX_PATH so that the generated config
# can be found by CMake.
#
# WARNING: Do NOT change the name of this file unless the name of the package
# changes! The name of this file MUST match <package-name>Config.cmake or
# <lowercase-package-name>-config.cmake so that it can to be found by
# find_package(...).
# ===============================================================================

# ---------------------------[ INITIAL BOILERPLATE ]---------------------------

@PACKAGE_INIT@

# CMake module used to specify dependencies that should be propagated to
# consumers of the package
include(CMakeFindDependencyMacro)

# -------------------[ EXTRACT IMPORTANT DEFINED VARIABLES ]-------------------

# Package root directory
set(OOMPH_PROJECT_NAME "@PROJECT_NAME@")
set(OOMPH_ROOT_DIR "@OOMPH_ROOT_DIR@")
set(OOMPH_CMAKE_MODULE_DIR "${OOMPH_ROOT_DIR}/cmake")
set(OOMPHLIB_LIBRARIES "@OOMPHLIB_LIBRARIES@")

# Specify the location of non-standard CMake modules and the C++ standard
set(CMAKE_CXX_STANDARD @CMAKE_CXX_STANDARD@)
set(CMAKE_CXX_STANDARD_REQUIRED @CMAKE_CXX_STANDARD_REQUIRED@)

# Compile definitions generated by oomph-lib. These definitions will be required
# by a consumer of the package to correctly build code provided by oomph-lib.
set(OOMPH_COMPILE_DEFINITIONS @OOMPH_COMPILE_DEFINITIONS@)

# Capture general values from the configuration step that may be required by the
# user (mainly for the demo drivers)
set(HAVE_ARPACK_SOURCES @HAVE_ARPACK_SOURCES@)
set(WANT_EIGENPROBLEM_TESTS ${HAVE_ARPACK_SOURCES})
set(HAVE_HSL_SOURCES @HAVE_HSL_SOURCES@)
set(HAVE_MALLOCH @OOMPH_HAS_MALLOCH@)
set(HAVE_STACKTRACE @OOMPH_HAS_STACKTRACE@)
set(HAVE_UNISTDH @OOMPH_HAS_UNISTDH@)
set(OOMPH_SUPPRESSED_TRIANGLE_LIB @SUPPRESS_TRIANGLE_LIB@)
set(OOMPH_SUPPRESSED_TETGEN_LIB @SUPPRESS_TETGEN_LIB@)
# set(HAVE_DARWIN, ...) set(WANT_MPI_VARIABLENP ...)

# Capture user's decision to use/build OpenBLAS/LAPACK
set(OOMPH_USE_OPENBLAS @OOMPH_USE_OPENBLAS@)

# Capture values from the configuration step to determine which dependencies
# should be forwarded to the user
set(OOMPH_HAS_MPI @OOMPH_ENABLE_MPI@)
set(OOMPH_HAS_CGAL @OOMPH_WANT_CGAL@)
set(OOMPH_HAS_HYPRE @OOMPH_WANT_HYPRE@)
set(OOMPH_HAS_MUMPS @OOMPH_WANT_MUMPS@)
set(OOMPH_HAS_TRILINOS @OOMPH_WANT_TRILINOS@)
set(OOMPH_HAS_NLOHMANN_JSON @OOMPH_WANT_NLOHMANN_JSON@)
set(OOMPH_HAS_SPDLOG @OOMPH_HAS_SPDLOG@)
set(OOMPH_HAS_GOOGLE_BENCHMARK @OOMPH_HAS_GOOGLE_BENCHMARK@)

# Search for OpenBLAS/LAPACK libraries
if(OOMPH_USE_OPENBLAS)
  set(BLAS_DIRS @BLAS_DIRS@)
  set(LAPACK_DIRS @LAPACK_DIRS@)
  list(APPEND CMAKE_PREFIX_PATH "${BLAS_DIRS};${LAPACK_DIRS}")

  set(BLA_VENDOR @BLA_VENDOR@)
  find_dependency(BLAS REQUIRED)
  find_dependency(LAPACK REQUIRED)
endif()

# ---------------------[ FORWARD DEPENDENCY REQUIREMENTS ]---------------------

# Python3 for self-tests
find_dependency(Python3 QUIET)

# MPI for MPI-enabled functionality
if(OOMPH_HAS_MPI)
  find_dependency(MPI REQUIRED)
  set(MPI_RUN_COMMAND "@MPI_RUN_COMMAND@")
  set(MPI_VARIABLENP_RUN_COMMAND "@MPI_VARIABLENP_RUN_COMMAND@")
endif()

# --------------------------[ THIRD-PARTY LIBRARIES ]--------------------------

# Third-party libraries we built. Make sure to also check whether the dependency
# has already been found otherwise these dependency checks can be called again
# and again unnecessarily

# Backward
if(OOMPH_HAS_BACKWARD AND NOT Backward_FOUND)
  find_dependency(Backward REQUIRED)
endif()

# nlohmann_json
if(OOMPH_HAS_NLOHMANN_JSON AND NOT nlohmann_json_FOUND)
  find_dependency(nlohmann_json 3.11.2 REQUIRED)
endif()

# spdlog
if(OOMPH_HAS_SPDLOG AND NOT spdlog_FOUND)
  find_dependency(spdlog 1.10.0 REQUIRED)
endif()

# CGAL
if(OOMPH_HAS_CGAL AND NOT CGAL_FOUND)
  find_dependency(CGAL 5.2.2 REQUIRED)
endif()

# MUMPS
if(OOMPH_HAS_MUMPS AND NOT MUMPS_FOUND)
  find_dependency(MUMPS 5.4.0 REQUIRED)
endif()

# Trilinos
#
# FIXME: This doesn't work -- it's a work in progress
if(OOMPH_HAS_TRILINOS AND NOT Trilinos_FOUND)
  # Extract important information from the Trilinos build
  set(OOMPH_TRILINOS_VERSION "@TRILINOS_VERSION@")
  set(OOMPH_TRILINOS_INSTALL_DIR "@OOMPH_TRILINOS_INSTALL_DIR@")
  set(OOMPH_TRILINOS_INCLUDE_DIR "${OOMPH_TRILINOS_INSTALL_DIR}/include")

  set(TRILINOS_LIBRARIES "@TRILINOS_LIBRARIES@")
  set(OOMPH_TRILINOS_LIBRARIES_WITH_PATHS
      "@OOMPH_TRILINOS_LIBRARIES_WITH_PATHS@")

  # Provide the location of the Trilinos install directory so that CMake can
  # find the TrilinosConfig.cmake file
  list(APPEND CMAKE_PREFIX_PATH "${OOMPH_TRILINOS_INSTALL_DIR}")
  find_dependency(Trilinos ${OOMPH_TRILINOS_VERSION} CONFIG REQUIRED)

  # TrilinosConfig.cmake doesn't set Trilinos_FOUND
  if(Trilinos_LIBRARIES)
    set(Trilinos_FOUND TRUE)
  endif()

  # Create the Trilinos libraries target to link against; this contains the
  # paths to each library artifact and the path to the Trilinos include
  # directory where all the headers are stored
  add_library(Trilinos::Trilinos INTERFACE IMPORTED GLOBAL)
  set_target_properties(
    Trilinos::Trilinos
    PROPERTIES IMPORTED_LOCATION "${OOMPH_TRILINOS_LIBRARIES_WITH_PATHS}"
               INTERFACE_INCLUDE_DIRECTORIES "${OOMPH_TRILINOS_INCLUDE_DIR}"
               INTERFACE_LINK_LIBRARIES "${TRILINOS_LIBRARIES}")
endif()

# --------------------------[ REMAINING BOILERPLATE ]--------------------------

include("${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@Exports.cmake")

# TODO: Update this to check for all of the desired components...
check_required_components("@PROJECT_NAMESPACE@")

# -------------------[ INCLUDE EXTRA INSTALLED CMAKE FILES ]-------------------

# FIXME: Explain why we export these CMake modules add_executable and add_test
# are obvious, by why enable_code_coverage?
include("${CMAKE_CURRENT_LIST_DIR}/OomphAddExecutable.cmake")
include("${CMAKE_CURRENT_LIST_DIR}/OomphAddTest.cmake")
include("${CMAKE_CURRENT_LIST_DIR}/OomphEnableCodeCoverage.cmake")

# Add the build/installation path to the paths to search for CMake modules. This
# is helpful when we have distributed some .cmake file but we can't just include
# it ourselves, e.g.
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}")

# Define a 'uninstall' target (i.e. to run "ninja uninstall") to uninstall files
# if the user doesn't already have one
if(NOT TARGET uninstall)
  add_custom_target(
    uninstall
    COMMAND ${CMAKE_COMMAND} -P
            ${CMAKE_CURRENT_LIST_DIR}/${OOMPH_PROJECT_NAME}Uninstall.cmake)
endif()
