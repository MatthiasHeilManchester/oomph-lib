# ===============================================================================
# A template configuration file to be processed by configure_file(...). We rely
# on this file to make the oomph-lib library available to other CMake projects
# after it has been installed. It contains information about oomph-lib's
# dependencies and the project configuration.
#
# CMake will replace variables enclosed by "@" by their values during the
# configuration step and the populated config file will be placed in the build
# folder under the same filename but without the .in suffix. After the CMake
# installation step, the newly-generated config file will, by default, be
# installed to the user's lib/cmake/ directory (e.g. /usr/lib/cmake/). If the
# user specified a custom installation path, it will be placed there instead,
# but again under the lib/cmake/ subdirectory.
#
# Once the library has been installed, the configuration file can found using
# find_package(oomphlib). If a custom installation path was used, the user will
# need to append that path to the CMAKE_PREFIX_PATH so that the generated config
# can be found by CMake.
#
# WARNING: Do NOT change the name of this file unless the name of the package
# changes! The name of this file MUST match <package-name>Config.cmake or
# <lowercase-package-name>-config.cmake so that it can to be found by
# find_package(...).
# ===============================================================================

# ---------------------------[ INITIAL BOILERPLATE ]---------------------------

@PACKAGE_INIT@

# CMake module used to specify dependencies that should be propagated to
# consumers of the package
include(CMakeFindDependencyMacro)

# Add the build/installation path to the paths to search for CMake modules. This
# is helpful when we have distributed some .cmake file but we can't just include
# it ourselves, e.g.
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}")

# -------------------[ EXTRACT IMPORTANT DEFINED VARIABLES ]-------------------

# FIXME: Tidy up file

# Package root directory
set(OOMPH_PROJECT_NAME "@PROJECT_NAME@")
set(OOMPH_ROOT_DIR "@OOMPH_ROOT_DIR@")
set(OOMPH_CMAKE_MODULE_DIR "${OOMPH_ROOT_DIR}/cmake")
set(OOMPHLIB_LIBRARIES "@OOMPHLIB_LIBRARIES@")

# Specify the location of non-standard CMake modules and the C++ standard
set(CMAKE_CXX_STANDARD @CMAKE_CXX_STANDARD@)
set(CMAKE_CXX_STANDARD_REQUIRED @CMAKE_CXX_STANDARD_REQUIRED@)

# Compile definitions generated by oomph-lib. These definitions will be required
# by a consumer of the package to correctly build code provided by oomph-lib.
set(OOMPH_COMPILE_DEFINITIONS @OOMPH_COMPILE_DEFINITIONS@)

# Capture general values from the configuration step that may be required by the
# user (mainly for the demo drivers)
set(HAVE_HSL_SOURCES @HAVE_HSL_SOURCES@)
set(HAVE_STACKTRACE @OOMPH_HAS_STACKTRACE@)
set(OOMPH_SUPPRESSED_TRIANGLE_LIB @SUPPRESS_TRIANGLE_LIB@)
set(OOMPH_SUPPRESSED_TETGEN_LIB @SUPPRESS_TETGEN_LIB@)
set(OOMPH_HAS_TETGEN @OOMPH_HAS_TETGEN@)
set(OOMPH_HAS_NEW_TETGEN @OOMPH_HAS_NEW_TETGEN@)
set(OOMPH_HAS_TRIANGLE @OOMPH_HAS_TRIANGLE@)
set(OOMPH_HAS_ZLIB @OOMPH_HAS_ZLIB@)
set(USING_OOMPH_SUPERLU @USING_OOMPH_SUPERLU@)

# ~~~
# No longer needed by demo drivers:
# set(HAVE_ARPACK_SOURCES @HAVE_ARPACK_SOURCES@)
# set(WANT_EIGENPROBLEM_TESTS ${HAVE_ARPACK_SOURCES})
# set(HAVE_MALLOCH @OOMPH_HAS_MALLOCH@)
# set(HAVE_UNISTDH @OOMPH_HAS_UNISTDH@)
# ~~~

# FIXME: Shouldn't the _HAS_ variables be the ones that are captured? (Not the
# _WANT_ or ENABLE_USE_ ones!)

# Capture values from the configuration step to determine which dependencies
# should be forwarded to the user. Note that if the packages aren't requested,
# the variables won't have any values (because the _HAS_ variables won't be
# set). However, they will still be "falsey"
set(OOMPH_HAS_MPI @OOMPH_HAS_MPI@)
set(OOMPH_HAS_CGAL @OOMPH_HAS_CGAL@)
set(OOMPH_HAS_HYPRE @OOMPH_HAS_HYPRE@)
set(OOMPH_HAS_MUMPS @OOMPH_HAS_MUMPS@)
set(OOMPH_HAS_TRILINOS @OOMPH_HAS_TRILINOS@)
set(OOMPH_HAS_NLOHMANN_JSON @OOMPH_HAS_NLOHMANN_JSON@)

# Capture user's decision to their own libraries
set(OOMPH_USE_MPI_FROM "@OOMPH_USE_MPI_FROM@")
set(OOMPH_USE_BOOST_FROM "@OOMPH_USE_BOOST_FROM@")
set(OOMPH_USE_CGAL_FROM "@OOMPH_USE_CGAL_FROM@")
set(OOMPH_USE_HYPRE_FROM "@OOMPH_USE_HYPRE_FROM@")
set(OOMPH_USE_TRILINOS_FROM "@OOMPH_USE_TRILINOS_FROM@")

# ---------------------[ FORWARD DEPENDENCY REQUIREMENTS ]---------------------

# Python3 for self-tests
find_dependency(Python3 QUIET)

# MPI for MPI-enabled functionality
#
# TODO: Decide whether to store MPI_<lang>_COMPILER here...
if(OOMPH_HAS_MPI)
  if(OOMPH_USE_MPI_FROM)
    set(BACKUP_CMAKE_PREFIX_PATH "${CMAKE_PREFIX_PATH}")
    set(CMAKE_PREFIX_PATH "${OOMPH_USE_MPI_FROM}" CACHE INTERNAL "" FORCE)
    find_dependency(MPI REQUIRED)
    set(CMAKE_PREFIX_PATH "${BACKUP_CMAKE_PREFIX_PATH}" CACHE INTERNAL "" FORCE)
  endif()
  find_dependency(MPI REQUIRED)

  # PM: Might get deleted... Only used in self_test/
  set(OOMPH_WANT_MPI_VARIABLENP @OOMPH_WANT_MPI_VARIABLENP@)

  set(MPI_RUN_COMMAND "@MPI_RUN_COMMAND@")
  set(MPI_VARIABLENP_RUN_COMMAND "@MPI_VARIABLENP_RUN_COMMAND@")
endif()

# -------------------------[ EXTERNAL SOURCES STUFF ]--------------------------

set(BLA_VENDOR @BLA_VENDOR@)
set(OOMPH_USE_BLAS_FROM "@OOMPH_USE_BLAS_FROM@")
set(OOMPH_USE_LAPACK_FROM "@OOMPH_USE_LAPACK_FROM@")

# Search for OpenBLAS/LAPACK libraries
if(BLA_VENDOR
   OR OOMPH_USE_BLAS_FROM
   OR OOMPH_USE_LAPACK_FROM)
  set(BLAS_DIRS @BLAS_DIRS@)
  set(LAPACK_DIRS @LAPACK_DIRS@)

  set(BACKUP_CMAKE_PREFIX_PATH "${CMAKE_PREFIX_PATH}")
  set(CMAKE_PREFIX_PATH "${BLAS_DIRS};${LAPACK_DIRS}" CACHE INTERNAL "" FORCE)

  find_dependency(BLAS REQUIRED)
  find_dependency(LAPACK REQUIRED)

  set(CMAKE_PREFIX_PATH "${BACKUP_CMAKE_PREFIX_PATH}" CACHE INTERNAL "" FORCE)
endif()

# --------------------------[ THIRD-PARTY LIBRARIES ]--------------------------
# cmake-format: off

# Third-party libraries we built. Make sure to also check whether the dependency
# has already been found otherwise these dependency checks can be called again
# and again unnecessarily

# NOTE: We pair find_dependency(...) calls below to have the form
#
# find_package(<PACKAGE> <VERSION> QUIET CONFIG PATHS "@OOMPH_USE_<PACKAGE>_FROM@;@CMAKE_INSTALL_PREFIX@" NO_DEFAULT_PATH)
# find_dependency(<PACKAGE> <VERSION> CONFIG REQUIRED)
#
# so that we first search the OOMPH_USE_<PACKAGE>_FROM directory and then install
# directory for the library incase we installed it ourselves. Only if this fails
# will we search system-wide for the library. We have to use find_package(...) for
# the first call otherwise if the user called find_package(oomphlib REQUIRED) then
# the find_dependency(...) will be REQUIRED. In this case, the find_package(...)
# call for oomphlib will fail instantly when we only want it to fail if we also
# couldn't find the package system-wide.


list(APPEND CMAKE_PREFIX_PATH "@CMAKE_INSTALL_PREFIX@")

# nlohmann_json
if(OOMPH_HAS_NLOHMANN_JSON AND (NOT nlohmann_json_FOUND))
  find_package(nlohmann_json 3.11.2 QUIET CONFIG PATHS "@OOMPH_USE_NLOHMANN_JSON_FROM@;@CMAKE_INSTALL_PREFIX@" NO_DEFAULT_PATH)
  find_dependency(nlohmann_json 3.11.2 CONFIG REQUIRED)
endif()

# CGAL
if(OOMPH_HAS_CGAL AND (NOT CGAL_FOUND))
  set(OOMPH_USE_GMP_FROM "@OOMPH_USE_GMP_FROM@")
  set(OOMPH_USE_MPFR_FROM "@OOMPH_USE_MPFR_FROM@")
  set(FORCE_BUILD_OWN_VERSION_OF_CGAL @FORCE_BUILD_OWN_VERSION_OF_CGAL@)

  # TODO: Check that this works with a custom gmp/mpfr installation
  set(BACKUP_CMAKE_PREFIX_PATH "${CMAKE_PREFIX_PATH}")
  set(CMAKE_PREFIX_PATH "${OOMPH_USE_GMP_FROM};${OOMPH_USE_MPFR_FROM}" CACHE INTERNAL "" FORCE)
  find_dependency(GMP REQUIRED)
  find_dependency(MPFR REQUIRED)
  set(CMAKE_PREFIX_PATH "${BACKUP_CMAKE_PREFIX_PATH}" CACHE INTERNAL "" FORCE)

  find_package(Boost 1.66.0 QUIET COMPONENTS Thread System Program_options PATHS "@OOMPH_USE_BOOST_FROM@;@CMAKE_INSTALL_PREFIX@" NO_DEFAULT_PATH)
  find_dependency(Boost 1.66.0 REQUIRED COMPONENTS Thread System Program_options)

  # FIXME: Delete the FORCE_BUILD_OWN_VERSION_OF_CGAL=TRUE block once the BUILD_TESTING bug in CGAL is resolved
  set(CGAL_DO_NOT_WARN_ABOUT_CMAKE_BUILD_TYPE @CGAL_DO_NOT_WARN_ABOUT_CMAKE_BUILD_TYPE@ CACHE INTERNAL "")
  if (FORCE_BUILD_OWN_VERSION_OF_CGAL)
    find_dependency(CGAL 5.5.1 CONFIG REQUIRED PATHS "@CMAKE_INSTALL_PREFIX@" NO_DEFAULT_PATH)
  else()
    find_dependency(CGAL 5.5.1 CONFIG REQUIRED PATHS "@OOMPH_USE_CGAL_FROM@;@CMAKE_INSTALL_PREFIX@" NO_DEFAULT_PATH)
  endif()

  # TODO: Once the bug in CGAL has been resolved (presumably shipped as CGAL v5.5.2),
  # uncomment the following lines and remove the above if-else block
  # find_package(CGAL 5.5.2 QUIET CONFIG REQUIRED PATHS "@OOMPH_USE_CGAL_FROM@;@CMAKE_INSTALL_PREFIX@" NO_DEFAULT_PATH)
  # find_dependency(CGAL 5.5.2 CONFIG REQUIRED)
endif()

# MUMPS
if(OOMPH_HAS_MUMPS AND (NOT MUMPS_FOUND))
  find_package(SCALAPACK 2.2.1.2 QUIET CONFIG PATHS "@OOMPH_USE_SCALAPACK_FROM@;@CMAKE_INSTALL_PREFIX@" NO_DEFAULT_PATH)
  find_dependency(SCALAPACK 2.2.1.2 CONFIG REQUIRED)
  find_package(MUMPS 5.5.1.11 QUIET CONFIG PATHS "@OOMPH_USE_MUMPS_FROM@;@CMAKE_INSTALL_PREFIX@" NO_DEFAULT_PATH)
  find_dependency(MUMPS 5.5.1.11 CONFIG REQUIRED)
endif()

# HYPRE
if(OOMPH_HAS_HYPRE AND (NOT HYPRE_FOUND))
  find_package(HYPRE 2.27.0 QUIET CONFIG PATHS "@OOMPH_USE_HYPRE_FROM@;@CMAKE_INSTALL_PREFIX@" NO_DEFAULT_PATH)
  find_dependency(HYPRE 2.27.0 CONFIG REQUIRED)
endif()

# Trilinos
if(OOMPH_HAS_TRILINOS AND (NOT Trilinos_FOUND))
  find_package(Trilinos 13.5.0 QUIET CONFIG PATHS "@OOMPH_USE_TRILINOS_FROM@;@CMAKE_INSTALL_PREFIX@" NO_DEFAULT_PATH)
  find_dependency(Trilinos 13.5.0 CONFIG REQUIRED)
endif()

# cmake-format: on
# --------------------------[ REMAINING BOILERPLATE ]--------------------------

include("${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@Exports.cmake")

# -------------------[ INCLUDE EXTRA INSTALLED CMAKE FILES ]-------------------

include("${CMAKE_CURRENT_LIST_DIR}/OomphGetHashedTargetName.cmake")
include("${CMAKE_CURRENT_LIST_DIR}/OomphAddExecutable.cmake")
include("${CMAKE_CURRENT_LIST_DIR}/OomphAddTest.cmake")
include("${CMAKE_CURRENT_LIST_DIR}/OomphEnableCodeCoverage.cmake")

# Define a 'uninstall' target (i.e. to run "ninja uninstall") to uninstall files
# if the user doesn't already have one
if(NOT TARGET uninstall)
  add_custom_target(
    uninstall
    COMMAND ${CMAKE_COMMAND} -P
            ${CMAKE_CURRENT_LIST_DIR}/${OOMPH_PROJECT_NAME}Uninstall.cmake)
endif()

# -----------------------------------------------------------------------------
