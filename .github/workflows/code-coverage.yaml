# ------------------------------------------------------------------------------
name: Code coverage

on: push

# ------------------------------------------------------------------------------

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # -----------------[[[ GENERATE CODE COVERAGE RESULTS ]]]-----------------

      - name: Check out repository
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo apt-get install -y gfortran ninja-build libopenblas-dev \
          openmpi-bin libopenmpi-dev gcovr fd-find gnupg2 curl

      - name: Configure & build (with coverage)
        run: |
          cmake --preset CI-build-with-coverage \
          -D OOMPH_USE_OPENBLAS=ON \
          -D OOMPH_ENABLE_MPI=ON \
          -B build && cd build && ninja

      - name: Run self-tests (with coverage)
        id: self_tests
        run: |
          cd demo_drivers && cp ../CMakePresets.json ./
          cmake --preset CI-demo-drivers-with-coverage -D CMAKE_PREFIX_PATH='${{ github.workspace }}/build' -B build
          cd build && cp ../CMakePresets.json ./
          ctest --preset CI-demo-drivers-with-coverage -j $(sysctl -n hw.logicalcpu)

      # ----------------[[[ PROCESS AND UPLOAD CODE COVERAGE ]]]----------------

      # For now, assume we don't care about coverage for the external sources
      # or the demo drivers (they're only used to validate the library sources).
      # To avoid including their coverage information, delete their respective
      # coverage artifacts (i.e. .gcno, .gcda, and .gcov files)
      - name: Delete unnecessary coverage files
        run: |
          printf "\n%s\n\n" "--> Deleting coverage files from external_src/ and external_distributions/..."
          fd -u '.*\.(gcno|gcda|gcov)' build/external_{src,distributions} -x echo " *" {}
          fd -u '.*\.(gcno|gcda|gcov)' build/external_{src,distributions} -x rm -f {}
          printf "\n%s\n\n" "---> Deleting coverage files from demo_drivers/..."
          fd -u '.*\.(gcno|gcda|gcov)' demo_drivers/build/ -x echo " *" {}
          fd -u '.*\.(gcno|gcda|gcov)' demo_drivers/build/ -x rm -f {}

      - name: Generate XML code coverage report
        run: gcovr -r . --xml-pretty -o coverage-report.xml

      - name: Upload coverage report to codecov.io
        uses: codecov/codecov-action@v2
        with:
          name: codecov-umbrella
          files: ./coverage-report.xml
          flags: integration-tests
          fail_ci_if_error: true
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage report to codacy.com
        run: bash <(curl -Ls https://coverage.codacy.com/get.sh) report -l CPP -r ./coverage-report.xml
        env:
          CODACY_PROJECT_TOKEN: '${{ secrets.CODACY_PROJECT_TOKEN }}'

# ------------------------------------------------------------------------------