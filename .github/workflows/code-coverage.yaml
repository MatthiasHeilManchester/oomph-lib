--- # ------------------------------------------------------------------------------
name: Code coverage

on:
  push:
    branches:
      - main
      - development

# Environment variable(s) that can be read during jobs
env:
  CTEST_OUTPUT_ON_FAILURE: 1
  # Enable oversubscription for OpenMPI to handle MPI-enabled tests requiring
  # more processors than are available
  OMPI_MCA_rmaps_base_oversubscribe: 1

# ------------------------------------------------------------------------------

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        # NOTE: The possible options are: [
        #   {status: "OFF", preset: ci-coverage},
        #   {status: "ON",  preset: ci-mpi-coverage}
        # ]
        mpi_info: [{ status: "OFF", cmake_preset: ci-coverage }]

    runs-on: ubuntu-latest
    steps:
      # -----------------[[[ GENERATE CODE COVERAGE RESULTS ]]]-----------------

      - name: Check out repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: sudo apt-get install -y gfortran ninja-build libopenblas-dev openmpi-bin libopenmpi-dev gcovr fd-find gnupg2 curl

      - name: Configure
        run: cmake --preset ${{ matrix.build_info.cmake_preset }} -B build

      - name: Build
        run: cmake --build build

      - name: Install
        run: cmake --install build

      - name: Configure basic self-tests
        run: cmake -G Ninja -S self_test -B self_test/build

      - name: Run basic self-tests
        id: self_tests
        run: ctest --preset ci --test-dir self_test/build -j $(nproc)

      - name: Configure demo drivers
        run: cmake -S demo_drivers -B demo_drivers/build

      - name: Run self-tests to collect coverage stats
        id: demo_drivers
        run: ctest --preset ci --test-dir demo_drivers/build -j $(nproc)

      # ----------------[[[ PROCESS AND UPLOAD CODE COVERAGE ]]]----------------

      # For now, assume we don't care about coverage for the external sources
      # or the demo drivers (they're only used to validate the library sources).
      # To avoid including their coverage information, delete their respective
      # coverage artifacts (i.e. .gcno, .gcda, and .gcov files)
      - name: Delete unnecessary coverage files
        run: |
          printf "\n%s\n\n" "--> Deleting coverage files from external_src/ and external_distributions/..."
          fdfind -u '.*\.(gcno|gcda|gcov)' build/external_{src,distributions} -x echo " *" {}
          fdfind -u '.*\.(gcno|gcda|gcov)' build/external_{src,distributions} -x rm -f {}
          printf "\n%s\n\n" "---> Deleting coverage files from demo_drivers/..."
          fdfind -u '.*\.(gcno|gcda|gcov)' demo_drivers/build/ -x echo " *" {}
          fdfind -u '.*\.(gcno|gcda|gcov)' demo_drivers/build/ -x rm -f {}

      - name: Generate XML code coverage report
        run: gcovr -r . --xml-pretty -o coverage-report.xml

      - name: Upload coverage report to codecov.io
        uses: codecov/codecov-action@v3
        with:
          name: codecov-umbrella
          files: ./coverage-report.xml
          flags: integration-tests
          fail_ci_if_error: true
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage report to codacy.com
        run: bash <(curl -Ls https://coverage.codacy.com/get.sh) report -l CPP -r ./coverage-report.xml
        env:
          CODACY_PROJECT_TOKEN: "${{ secrets.CODACY_PROJECT_TOKEN }}"
# ------------------------------------------------------------------------------
