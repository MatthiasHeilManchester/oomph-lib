--- # ------------------------------------------------------------------------------

name: oomph-lib self-tests (Ubuntu)

on:
  # IMPORTANT: A schedule workflow action *must* be placed on the default branch
  # of the repository. Only then will it run as scheduled. It is also placed in a
  # queue when scheduled, so it may not run exactly at the requested time.
  schedule:
    # Calculated using crontab.guru. See here:
    #     https://crontab.guru/#1_0_1_1_*.
    # Every month on the first at midnight UTC
    - cron: "0 0 1 * *"
  push:
    paths:
      # Only run the self-tests if we edited the demo drivers, sources, third-party
      # library code or self-tests
      - ".github/workflows/self-tests-ubuntu.yaml"
      - "cmake/**"
      - "CMakeLists.txt"
      - "demo_drivers/**"
      - "external_distributions/CMakeLists.txt"
      - "external_distributions/cmake/**"
      - "external_src/**"
      - "scripts/**"
      - "src/**"
      - "!**/.gitignore"
      - "!**/README.md"
      - "!**/Makefile.am"

# Environment variables that can be read during jobs
env:
  CTEST_OUTPUT_ON_FAILURE: 1
  # Enable oversubscription for OpenMPI to handle MPI-enabled tests requiring
  # more processors than are available
  OMPI_MCA_rmaps_base_oversubscribe: 1

# ------------------------------------------------------------------------------

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        build_info:
          [
            { enable_mpi: "OFF", preset: ci },
            { enable_mpi: "ON", preset: ci-mpi },
          ]
        build_third_party_libs: ["OFF", "ON"]

    name: All self-tests (MPI=${{ matrix.build_info.enable_mpi }}; TPL=${{matrix.build_third_party_libs}})
    runs-on: ubuntu-latest
    steps:
      # -------------------
      # INITIAL SETUP:
      # -------------------
      - name: Check out oomph-lib repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y gfortran ninja-build

      - name: Install Python 2.7
        uses: LizardByte/setup-python-action@master
        with:
          python-version: "2.7"

      - name: Install Python 3.13
        uses: LizardByte/setup-python-action@master
        with:
          python-version: "3.13"

      - name: Install MPI dependencies (if required)
        if: matrix.build_info.enable_mpi == 'ON'
        run: sudo apt-get install openmpi-bin libopenmpi-dev

      - name: Get CMake v3.24
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: "~3.24.0"

      - name: Check CMake version
        run: cmake --version

      # -------------------
      # THIRD-PARTY LIBS:
      # -------------------
      - name: Configure desired third-party libraries
        run: |
          cmake -G Ninja \
            -DOOMPH_ENABLE_MPI=${{ matrix.build_info.enable_mpi }} \
            -DOOMPH_BUILD_OPENBLAS=ON \
            -DOOMPH_BUILD_CGAL=ON \
            -DOOMPH_BUILD_SUPERLU_DIST=${{ matrix.build_info.enable_mpi }} \
            -DOOMPH_BUILD_MUMPS=${{ matrix.build_third_party_libs }} \
            -DOOMPH_BUILD_HYPRE=${{ matrix.build_third_party_libs }} \
            -DOOMPH_BUILD_TRILINOS=${{ matrix.build_third_party_libs }} \
            -DOOMPH_DISABLE_THIRD_PARTY_LIBRARY_TESTS=ON \
            -B build
        working-directory: ./external_distributions/

      - name: Build third-party libraries
        run: cmake --build build
        working-directory: ./external_distributions/

      - name: Rename third-party libraries build logs
        run: mv ./external_distributions/build/logs ./tpl_build_logs-${{ runner.os }}-MPI_${{ matrix.build_info.enable_mpi }}-TPL_${{ matrix.build_third_party_libs }}

      - name: Upload third-party libraries build logs
        uses: actions/upload-artifact@v4
        with:
          name: tpl_build_logs-${{ runner.os }}-MPI_${{ matrix.build_info.enable_mpi }}-TPL_${{ matrix.build_third_party_libs }}
          path: ./tpl_build_logs-${{ runner.os }}-MPI_${{ matrix.build_info.enable_mpi }}-TPL_${{ matrix.build_third_party_libs }}/

      # -------------------
      # BUILD MAIN PROJECT:
      # -------------------
      - name: Configure main project
        run: cmake --preset ${{ matrix.build_info.preset }} $(cat external_distributions/build/cmake_flags_for_oomph_lib.txt) -B build

      - name: Build main project
        run: cmake --build build

      - name: Install main project
        run: cmake --install build

      # -------------------
      # DEMO DRIVERS:
      # -------------------
      - name: Configure demo drivers
        run: cmake -G Ninja -S demo_drivers -B demo_drivers/build -DCMAKE_BUILD_TYPE=Release --log-level=VERBOSE

      - name: Run demo driver self-tests
        id: demo_drivers
        run: ctest --preset ci --test-dir demo_drivers/build -j $(nproc)
        continue-on-error: true

      # -------------------
      # UPLOAD STUFF:
      # -------------------
      - name: Summarise validation.log for GitHub
        run: python3 .github/generate_validation_log_summary.py validation.log >> $GITHUB_STEP_SUMMARY

      - name: Rename validation log file
        run: mv ./validation.log ./validation-${{ runner.os }}-MPI_${{ matrix.build_info.enable_mpi }}-TPL_${{ matrix.build_third_party_libs }}.log

      - name: Upload validation log file
        uses: actions/upload-artifact@v4
        with:
          name: validation-${{ runner.os }}-MPI_${{ matrix.build_info.enable_mpi }}-TPL_${{ matrix.build_third_party_libs }}.log
          path: ./validation-${{ runner.os }}-MPI_${{ matrix.build_info.enable_mpi }}-TPL_${{ matrix.build_third_party_libs }}.log

      - name: Propagate CTest test status
        if: steps.self_tests.outcome == 'failure' || steps.demo_drivers.outcome == 'failure'
        run: exit 8
# ------------------------------------------------------------------------------
